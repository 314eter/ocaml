#!/bin/bash

#########################################################################
#                                                                       #
#                                 OCaml                                 #
#                                                                       #
#                Damien Doligez, Jane Street Capital                    #
#                                                                       #
#   Copyright 2014 Institut National de Recherche en Informatique et    #
#   en Automatique.  All rights reserved.  This file is distributed     #
#   under the terms of the Q Public License version 1.0.                #
#                                                                       #
#########################################################################

[ -z "$Tdebug" ] || set -x

Pwith_byte=true
Pwith_opt=true
case $1 in
    -byteonly) Pwith_opt=false; shift;;
    -optonly) Pwith_byte=false; shift;;
esac

Pfile=$1
Pdir=$(dirname $1)
base=$(basename $1 .t)
byte_exec=$base.byt
opt_exec=$base.exe

Pocamlrun="$TOPDIR/boot/ocamlrun$EXE"
Pflags="-nostdlib -I $OTOPDIR/stdlib -I $OTOPDIR/testsuite/lib"
Pocamlc="$Pocamlrun $OTOPDIR/ocamlc $Pflags"
Pocamlopt="$Pocamlrun $OTOPDIR/ocamlopt $Pflags"
Pocaml="$Pocamlrun $OTOPDIR/ocaml $Pflags \
        -init $OTOPDIR/testsuite/scripts/empty"
Pocamldoc="$Pocamlrun $OTOPDIR/ocamldoc/ocamldoc"
Plex="$Pocamlrun $OTOPDIR/lex/ocamllex"
Pyacc="$TOPDIR/yacc/ocamlyacc$EXE"
Pocamlmklib="$Pocamlrun $OTOPDIR/tools/ocamlmklib \
             -ocamlc '$OTOPDIR/boot/ocamlrun$EXE $OTOPDIR/ocamlc $Pflags' \
             -ocamlopt '$OTOPDIR/boot/ocamlrun$EXE $OTOPDIR/ocamlopt $Pflags'"
if [ "$ARCH" = none -o "$ASM" = none ]; then
  Pwith_opt=false
fi

if $SUPPORTS_SHARED_LIBRARIES; then
  config_custom=false
else
  config_custom=true
fi

sources="$base.ml"

kinds="byte opt"

compflags=
byteflags=
custom=false
optflags=
lexflags=-q
yaccflags=-q
cflags=

exec_env=
args=
exit=0
compexit=0
postprocess=false
postexit=0

# Print the error message to stderr and exit with an error code.
error () {
    echo ERROR: $* >&2
    exit 5
}

# Log the command given as argument(s) and execute it, saving the outputs
launch () {
    pwd
    echo "$*" >&2
    Ltmpexit=0
    Lstg=${Pstage:+-$Pstage}
    eval "$*" </dev/null >>_tmp/$base-$kind$Lstg.refout \
         2>>_tmp/$base-$kind$Lstg.referr \
      || Ltmpexit=$?
    eval "P${Pstage}exit=$Ltmpexit"
}

# Log the command given as argument(s) and execute it, leaving the outputs alone
log () {
    echo "$*" >&2
    eval "$*"
}

# Compile mlyacc, mllex and C files, and build a list of files for the
# OCaml compiler to compile and link.
# Two arguments: the extensions to use for library objects (cmo/cmx) and
#   libs (cma/cmxa).
precompile () {
    cmoext=$1
    cmaext=$2
    Pocamlfiles=
    for f in $sources; do
        case $f in
            *.ml|*.mli)
                Pocamlfiles="$Pocamlfiles $f";;
            *.mly)
                launch $Pyacc $yaccflags $f
                Pocamlfiles="$Pocamlfiles ${f%.mly}.mli ${f%.mly}.ml";;
            *.mll)
                launch $Plex $lexflags $f
                Pocamlfiles="$Pocamlfiles ${f%.mll}.ml";;
            *.c)
                launch $NATIVECC $NATIVECCCOMPOPTS $cflags \
                    -I $CTOPDIR/byterun -c $f
                Pcustomflag=-custom
                Pocamlfiles="$Pocamlfiles ${f%.c}.$O";;
            *.cmo) Pocamlfiles="$Pocamlfiles ${f%.cmo}.$cmoext";;
            *.cma) Pocamlfiles="$Pocamlfiles ${f%.cma}.$cmaext";;
            *.$O)
                Pcustomflag=-custom
                Pocamlfiles="$Pocamlfiles $f";;
            *) error "unexpected source file extension: $f";;
        esac
    done
}

byte_comp () {
    preprocess
    precompile cmo cma
    launch $Pocamlc $compflags $Pcustomflag $byteflags $Pocamlfiles \
        -o $byte_exec
}

opt_comp () {
    preprocess
    precompile cmx cmxa
    launch $Pocamlopt $compflags $optflags $Pocamlfiles -o $opt_exec
}

byte_run () {
    case $Pcustomflag in
        "") Luseruntime=$Pocamlrun;;
        -custom) Luseruntime=;;
        *) error "internal error (bad value for Pcustomflag)";;
    esac
    launch $exec_env $Luseruntime ./$byte_exec $args
}

opt_run () {
    launch $exec_env ./$opt_exec $args
}

postprocess_out () {
    cp $1 $1.post
}

byte_postprocess_out () {
    postprocess_out
}

opt_postprocess_out () {
    postprocess_out
}

postprocess_err () {
    cp $1 $1.post
}

opt_postprocess_err () {
    postprocess_err
}

opt_postprocess_err () {
    postprocess_err
}

postprocess_sort () {
    log "sort $1 >$1.post"
}

postprocess_sort_uniq () {
    log "sort $1 | uniq >$1.post"
}

Pcompare_files () {
    ref="$1"
    act="$2"
    if [ ! -f "$ref" ]; then ref=/dev/null; fi
    log $DIFF $ref $act
}

Pcheck () {
    if $postprocess; then
        post=.post
    else
        post=
    fi
    (
        set -e
        for suff in -comp.refout -comp.referr .refout$post .referr$post; do
            Pcompare_files $base$suff _tmp/$base-$kind$suff
        done
        [ "$Pcompexit" -eq "$compexit" ] || {
            error "compilation exit code $Pcompexit is different" \
                "from expected $compexit"
            false
        }
        [ "$Pexit" -eq "$exit" ] || {
            error "program exit code $Pexit is different from expected $exit"
            false
        }
    )
}

Pcheck_kind () {
    case $kind/$Pwith_opt/$Pwith_byte in
        opt/false/*) false;;
        byte/*/false) false;;
        *) true;;
    esac
}

preprocess () {
    :
}

precheck () {
    :
}

opt_precheck () {
    precheck
}

byte_precheck () {
    precheck
}

Pexport_variables () {
    export OCAMLYACC="$Pyacc"
    export OCAMLLEX="$Plex"
    export OCAMLC="$Pocamlc"
    export OCAMLOPT="$Pocamlopt"
    export OCAMLRUN="$Pocamlrun"
}

Pstart_test () {
    printf "Testing %-4s %s ... " "$kind" "$Pfile" >&3
    printf "#################################################"
    printf "\nTesting %-4s %s ...\n" "$kind" "$Pfile"
}

Pskip_test () {
    printf "skip\n" >&3
    printf "skip\n\n"
    exit 0
}

Pfail_test () {
    printf "FAIL\n" >&3
    printf "FAIL\n\n"
}

Ppass_test () {
    printf "pass\n" >&3
    printf "pass\n\n"
}

cd "$Pdir"

######################################################
# read the user's definitions

. ./$base.t

# compute whether to use a custom runtime
if $custom || ! $SUPPORTS_SHARED_LIBRARIES; then
    Pcustomflag=-custom
else
    Pcustomflag=
fi

######################################################

Pexport_variables
mkdir -p _tmp
for kind in $kinds; do
    Pstart_test
    (
        # Skip test if kind=opt and configured without native code
        # or if user disabled the current kind
        Pcheck_kind || Pskip_test
        # Run user-defined pre-check
        ${kind}_precheck || Pskip_test
        rm -f _tmp/$base{-comp,,-post}.ref{out,err}
        (
            Pstage=comp
            ${kind}_comp
            Pstage=
            ${kind}_run
            if $postprocess; then
                Pstage=post
                (cd _tmp; ${kind}_postprocess_out $base-$kind.refout)
                (cd _tmp; ${kind}_postprocess_err $base-$kind.referr)
            fi
            Pcheck
        )
        case $? in
            0) Ppass_test;;
            *) Pfail_test;;
        esac
    )
done
