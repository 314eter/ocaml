#!/bin/bash

#########################################################################
#                                                                       #
#                                 OCaml                                 #
#                                                                       #
#                Damien Doligez, Jane Street Capital                    #
#                                                                       #
#   Copyright 2014 Institut National de Recherche en Informatique et    #
#   en Automatique.  All rights reserved.  This file is distributed     #
#   under the terms of the Q Public License version 1.0.                #
#                                                                       #
#########################################################################

[ -z "$Tdebug" ] || set -x

Pfile=$1
Pdir=$(dirname $1)
base=$(basename $1 .t)
byte_exec=$base.byt
opt_exec=$base.exe

Pocamlrun="$TOPDIR/boot/ocamlrun$EXE"
Pflags="-nostdlib -I $OTOPDIR/stdlib"
Pocamlc="$Pocamlrun $OTOPDIR/ocamlc $Pflags"
Pocamlopt="$Pocamlrun $OTOPDIR/ocamlopt $Pflags"
Pocaml="$Pocamlrun $OTOPDIR/ocaml $Pflags \
        -init $OTOPDIR/testsuite/scripts/empty"
Pocamldoc="$Pocamlrun $OTOPDIR/ocamldoc/ocamldoc"
Plex="$Pocamlrun $OTOPDIR/lex/ocamllex"
Pyacc="$TOPDIR/yacc/ocamlyacc$EXE"
Pocamlmklib="$Pocamlrun $OTOPDIR/tools/ocamlmklib \
             -ocamlc '$OTOPDIR/boot/ocamlrun$EXE $OTOPDIR/ocamlc $Pflags' \
             -ocamlopt '$OTOPDIR/boot/ocamlrun$EXE $OTOPDIR/ocamlopt $Pflags'"
if [ "$ARCH" = none -o "$ASM" = none ]; then
  Pwith_opt=false
else
  Pwith_opt=true
fi

if $SUPPORTS_SHARED_LIBRARIES; then
  config_custom=false
else
  config_custom=true
fi

ml_files="$base.ml"
mli_files=
mll_files=
mly_files=
c_files=

kinds="byte opt"

compflags=
byteflags=
custom=false
optflags=
lexflags=-q
yaccflags=-q

exec_env=
args=
exit=0
compexit=0
postprocess=false
postexit=0

# Log the command and execute it, saving the outputs
launch () {
    pwd
    echo "$*" >&2
    Ptmpexit=0
    Pstg=${Pstage:+-$Pstage}
    eval "$*" </dev/null >>_tmp/$base-$kind$Pstg.out \
         2>>_tmp/$base-$kind$Pstg.err \
      || Ptmpexit=$?
    eval "P${Pstage}exit=$Ptmpexit"
}

# Log the command and execute it, leaving the outputs alone
log () {
    echo "$*" >&2
    eval "$*"
}

generate_lex_yacc () {
    for f in $mll_files; do
        launch $Plex $lexflags $f
    done
    for f in $mly_files; do
        launch $Pyacc $yaccflags $f
    done
}

compile_c_files () {
    Pofile=
    for f in $c_files; do
        launch $NATIVECC $NATIVECCCOMPOPTS -c -I $CTOPDIR/byterun $f
        Pofiles="$Pofile ${f%.c}.o"
    done
}

byte_comp () {
    preprocess
    generate_lex_yacc
    compile_c_files
    launch $Pocamlc $compflags $Pcustomflag $byteflags $Pofiles \
           $mli_files $ml_files -o $byte_exec
}

opt_comp () {
    preprocess
    generate_lex_yacc
    compile_c_files
    launch $Pocamlopt $compflags $optflags $Pofiles \
           $mli_files $ml_files -o $opt_exec
}

byte_run () {
    launch $exec_env $Puseruntime ./$byte_exec $args
}

opt_run () {
    launch $exec_env ./$opt_exec $args
}

postprocess_out () {
    cp $1 $1.post
}

byte_postprocess_out () {
    postprocess_out
}

opt_postprocess_out () {
    postprocess_out
}

postprocess_err () {
    cp $1 $1.post
}

opt_postprocess_err () {
    postprocess_err
}

opt_postprocess_err () {
    postprocess_err
}

postprocess_sort () {
    log "sort $1 >$1.post"
}

postprocess_sort_uniq () {
    log "sort $1 | uniq >$1.post"
}

Pcompare_files () {
    ref="$1"
    act="$2"
    if [ ! -f "$ref" ]; then ref=/dev/null; fi
    log cmp $ref $act
}

Pcheck () {
    if $postprocess; then
        post=.post
    else
        post=
    fi
    (
        set -e
        for suff in -comp.out -comp.err .out$post .err$post; do
            Pcompare_files $base$suff _tmp/$base-$kind$suff
        done
        [ "$Pcompexit" -eq "$compexit" ] || {
            printf "ERROR: compilation exit code %d is different from expected %d\n" \
                $Pcompexit $compexit
            false
        }
        [ "$Pexit" -eq "$exit" ] || {
            printf "ERROR: program exit code %d is different from expected %d\n" \
                $Pcompexit $compexit
            false
        }
    )
}

Pcheck_opt () {
    case $kind/$Pwith_opt in
        opt/false) false;;
        *) true;;
    esac
}

preprocess () {
    :
}

precheck () {
    :
}

opt_precheck () {
    precheck
}

byte_precheck () {
    precheck
}

Pexport_variables () {
    export OCAMLYACC="$Pyacc"
    export OCAMLLEX="$Plex"
    export OCAMLC="$Pocamlc"
    export OCAMLRUN="$Pocamlrun"
}

Pstart_test () {
    printf "Testing %-4s %s..." "$kind" "$Pfile" >&3
    printf "#################################################"
    printf "\nTesting %-4s %s...\n" "$kind" "$Pfile"
}

Pskip_test () {
    printf "skip\n" >&3
    printf "skip\n\n"
    exit 0
}

Pfail_test () {
    printf "FAIL\n" >&3
    printf "FAIL\n\n"
}

Ppass_test () {
    printf "pass\n" >&3
    printf "pass\n\n"
}

cd "$Pdir"

######################################################
# read the user's definitions

. ./$base.t

# compute whether to use a custom runtime
Pcustomflag=
if $custom; then Pcustomflag=-custom; fi
if ! $SUPPORTS_SHARED_LIBRARIES; then Pcustomflag=-custom; fi
if [ -n "$c_files" ]; then Pcustomflag=-custom; fi
if [ "$Pcustomflag" = -custom ]; then
    Puseruntime=
else
    Puseruntime=$Pocamlrun
fi

######################################################

Pexport_variables
mkdir -p _tmp
for kind in $kinds; do
    Pstart_test
    (
        # Skip opt test if configured without native code
        Pcheck_opt || Pskip_test
        # Run user-defined pre-check
        ${kind}_precheck || Pskip_test
        rm -f _tmp/$base{-comp,,-post}.{out,err}
        (
            Pstage=comp
            ${kind}_comp
            Pstage=
            ${kind}_run
            if $postprocess; then
                Pstage=post
                (cd _tmp; ${kind}_postprocess_out $base-$kind.out)
                (cd _tmp; ${kind}_postprocess_err $base-$kind.err)
            fi
            Pcheck
        )
        case $? in
            0) Ppass_test;;
            *) Pfail_test;;
        esac
    )
done
